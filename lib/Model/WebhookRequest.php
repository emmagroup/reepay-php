<?php
/**
 * WebhookRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * WebhookRequest Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class WebhookRequest implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'initiated' => '\DateTime',
        'duration' => 'int',
        'headers' => 'string',
        'content' => 'string',
        'http_status' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'initiated' => 'initiated',
        'duration' => 'duration',
        'headers' => 'headers',
        'content' => 'content',
        'http_status' => 'http_status'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'initiated' => 'setInitiated',
        'duration' => 'setDuration',
        'headers' => 'setHeaders',
        'content' => 'setContent',
        'http_status' => 'setHttpStatus'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'initiated' => 'getInitiated',
        'duration' => 'getDuration',
        'headers' => 'getHeaders',
        'content' => 'getContent',
        'http_status' => 'getHttpStatus'
    );
  
    
    /**
      * $id Unique webhook id assigned by Reepay
      * @var string
      */
    protected $id;
    
    /**
      * $initiated Date when the webhook request was initiated, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
      * @var \DateTime
      */
    protected $initiated;
    
    /**
      * $duration Duration in milliseconds of request
      * @var int
      */
    protected $duration;
    
    /**
      * $headers HTTP headers received, null if no response
      * @var string
      */
    protected $headers;
    
    /**
      * $content Truncated content received, null if no response
      * @var string
      */
    protected $content;
    
    /**
      * $http_status HTTP status code received, null if no response
      * @var int
      */
    protected $http_status;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->initiated = $data["initiated"];
            $this->duration = $data["duration"];
            $this->headers = $data["headers"];
            $this->content = $data["content"];
            $this->http_status = $data["http_status"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Unique webhook id assigned by Reepay
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets initiated
     * @return \DateTime
     */
    public function getInitiated()
    {
        return $this->initiated;
    }
  
    /**
     * Sets initiated
     * @param \DateTime $initiated Date when the webhook request was initiated, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setInitiated($initiated)
    {
        
        $this->initiated = $initiated;
        return $this;
    }
    
    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->duration;
    }
  
    /**
     * Sets duration
     * @param int $duration Duration in milliseconds of request
     * @return $this
     */
    public function setDuration($duration)
    {
        
        $this->duration = $duration;
        return $this;
    }
    
    /**
     * Gets headers
     * @return string
     */
    public function getHeaders()
    {
        return $this->headers;
    }
  
    /**
     * Sets headers
     * @param string $headers HTTP headers received, null if no response
     * @return $this
     */
    public function setHeaders($headers)
    {
        
        $this->headers = $headers;
        return $this;
    }
    
    /**
     * Gets content
     * @return string
     */
    public function getContent()
    {
        return $this->content;
    }
  
    /**
     * Sets content
     * @param string $content Truncated content received, null if no response
     * @return $this
     */
    public function setContent($content)
    {
        
        $this->content = $content;
        return $this;
    }
    
    /**
     * Gets http_status
     * @return int
     */
    public function getHttpStatus()
    {
        return $this->http_status;
    }
  
    /**
     * Sets http_status
     * @param int $http_status HTTP status code received, null if no response
     * @return $this
     */
    public function setHttpStatus($http_status)
    {
        
        $this->http_status = $http_status;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
