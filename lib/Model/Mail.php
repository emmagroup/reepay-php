<?php
/**
 * Mail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Mail Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Mail implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'state' => 'string',
        'customer' => 'string',
        'subscription' => 'string',
        'invoice' => 'string',
        'created' => '\DateTime',
        'sent' => '\DateTime',
        'events' => '\Swagger\Client\Model\MailEvent[]',
        'from' => 'string',
        'to' => 'string[]',
        'cc' => 'string[]',
        'bcc' => 'string[]',
        'subject' => 'string',
        'text' => 'string',
        'html' => 'string',
        'mail_type' => 'string',
        'last_send_error' => '\DateTime',
        'first_send_error' => '\DateTime',
        'reply_to' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'state' => 'state',
        'customer' => 'customer',
        'subscription' => 'subscription',
        'invoice' => 'invoice',
        'created' => 'created',
        'sent' => 'sent',
        'events' => 'events',
        'from' => 'from',
        'to' => 'to',
        'cc' => 'cc',
        'bcc' => 'bcc',
        'subject' => 'subject',
        'text' => 'text',
        'html' => 'html',
        'mail_type' => 'mail_type',
        'last_send_error' => 'last_send_error',
        'first_send_error' => 'first_send_error',
        'reply_to' => 'reply_to'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'state' => 'setState',
        'customer' => 'setCustomer',
        'subscription' => 'setSubscription',
        'invoice' => 'setInvoice',
        'created' => 'setCreated',
        'sent' => 'setSent',
        'events' => 'setEvents',
        'from' => 'setFrom',
        'to' => 'setTo',
        'cc' => 'setCc',
        'bcc' => 'setBcc',
        'subject' => 'setSubject',
        'text' => 'setText',
        'html' => 'setHtml',
        'mail_type' => 'setMailType',
        'last_send_error' => 'setLastSendError',
        'first_send_error' => 'setFirstSendError',
        'reply_to' => 'setReplyTo'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'state' => 'getState',
        'customer' => 'getCustomer',
        'subscription' => 'getSubscription',
        'invoice' => 'getInvoice',
        'created' => 'getCreated',
        'sent' => 'getSent',
        'events' => 'getEvents',
        'from' => 'getFrom',
        'to' => 'getTo',
        'cc' => 'getCc',
        'bcc' => 'getBcc',
        'subject' => 'getSubject',
        'text' => 'getText',
        'html' => 'getHtml',
        'mail_type' => 'getMailType',
        'last_send_error' => 'getLastSendError',
        'first_send_error' => 'getFirstSendError',
        'reply_to' => 'getReplyTo'
    );
  
    
    /**
      * $id Unique mail id assigned by Reepay
      * @var string
      */
    protected $id;
    
    /**
      * $state The mail state one of the following: `pending`, `error`, `disabled`, `rejected`, `sent`, `not_allowed`, `no_recipient`
      * @var string
      */
    protected $state;
    
    /**
      * $customer Customer handle
      * @var string
      */
    protected $customer;
    
    /**
      * $subscription Subscription handle
      * @var string
      */
    protected $subscription;
    
    /**
      * $invoice Invoice id
      * @var string
      */
    protected $invoice;
    
    /**
      * $created When the mail was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
      * @var \DateTime
      */
    protected $created;
    
    /**
      * $sent When the mail was sent to mail gateway, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
      * @var \DateTime
      */
    protected $sent;
    
    /**
      * $events List of events for mail
      * @var \Swagger\Client\Model\MailEvent[]
      */
    protected $events;
    
    /**
      * $from From address
      * @var string
      */
    protected $from;
    
    /**
      * $to List of To addresses
      * @var string[]
      */
    protected $to;
    
    /**
      * $cc List of Cc addresses
      * @var string[]
      */
    protected $cc;
    
    /**
      * $bcc List of Bcc addresses
      * @var string[]
      */
    protected $bcc;
    
    /**
      * $subject Subject
      * @var string
      */
    protected $subject;
    
    /**
      * $text Text content
      * @var string
      */
    protected $text;
    
    /**
      * $html HTML content
      * @var string
      */
    protected $html;
    
    /**
      * $mail_type The mail type (see documentation)
      * @var string
      */
    protected $mail_type;
    
    /**
      * $last_send_error When sending failed last, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
      * @var \DateTime
      */
    protected $last_send_error;
    
    /**
      * $first_send_error When sending failed the first time, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
      * @var \DateTime
      */
    protected $first_send_error;
    
    /**
      * $reply_to Reply-To address
      * @var string
      */
    protected $reply_to;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->state = $data["state"];
            $this->customer = $data["customer"];
            $this->subscription = $data["subscription"];
            $this->invoice = $data["invoice"];
            $this->created = $data["created"];
            $this->sent = $data["sent"];
            $this->events = $data["events"];
            $this->from = $data["from"];
            $this->to = $data["to"];
            $this->cc = $data["cc"];
            $this->bcc = $data["bcc"];
            $this->subject = $data["subject"];
            $this->text = $data["text"];
            $this->html = $data["html"];
            $this->mail_type = $data["mail_type"];
            $this->last_send_error = $data["last_send_error"];
            $this->first_send_error = $data["first_send_error"];
            $this->reply_to = $data["reply_to"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Unique mail id assigned by Reepay
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }
  
    /**
     * Sets state
     * @param string $state The mail state one of the following: `pending`, `error`, `disabled`, `rejected`, `sent`, `not_allowed`, `no_recipient`
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array("pending", "error", "disabled", "rejected", "sent", "not_allowed", "no_recipient");
        if (!in_array($state, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'pending', 'error', 'disabled', 'rejected', 'sent', 'not_allowed', 'no_recipient'");
        }
        $this->state = $state;
        return $this;
    }
    
    /**
     * Gets customer
     * @return string
     */
    public function getCustomer()
    {
        return $this->customer;
    }
  
    /**
     * Sets customer
     * @param string $customer Customer handle
     * @return $this
     */
    public function setCustomer($customer)
    {
        
        $this->customer = $customer;
        return $this;
    }
    
    /**
     * Gets subscription
     * @return string
     */
    public function getSubscription()
    {
        return $this->subscription;
    }
  
    /**
     * Sets subscription
     * @param string $subscription Subscription handle
     * @return $this
     */
    public function setSubscription($subscription)
    {
        
        $this->subscription = $subscription;
        return $this;
    }
    
    /**
     * Gets invoice
     * @return string
     */
    public function getInvoice()
    {
        return $this->invoice;
    }
  
    /**
     * Sets invoice
     * @param string $invoice Invoice id
     * @return $this
     */
    public function setInvoice($invoice)
    {
        
        $this->invoice = $invoice;
        return $this;
    }
    
    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }
  
    /**
     * Sets created
     * @param \DateTime $created When the mail was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setCreated($created)
    {
        
        $this->created = $created;
        return $this;
    }
    
    /**
     * Gets sent
     * @return \DateTime
     */
    public function getSent()
    {
        return $this->sent;
    }
  
    /**
     * Sets sent
     * @param \DateTime $sent When the mail was sent to mail gateway, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setSent($sent)
    {
        
        $this->sent = $sent;
        return $this;
    }
    
    /**
     * Gets events
     * @return \Swagger\Client\Model\MailEvent[]
     */
    public function getEvents()
    {
        return $this->events;
    }
  
    /**
     * Sets events
     * @param \Swagger\Client\Model\MailEvent[] $events List of events for mail
     * @return $this
     */
    public function setEvents($events)
    {
        
        $this->events = $events;
        return $this;
    }
    
    /**
     * Gets from
     * @return string
     */
    public function getFrom()
    {
        return $this->from;
    }
  
    /**
     * Sets from
     * @param string $from From address
     * @return $this
     */
    public function setFrom($from)
    {
        
        $this->from = $from;
        return $this;
    }
    
    /**
     * Gets to
     * @return string[]
     */
    public function getTo()
    {
        return $this->to;
    }
  
    /**
     * Sets to
     * @param string[] $to List of To addresses
     * @return $this
     */
    public function setTo($to)
    {
        
        $this->to = $to;
        return $this;
    }
    
    /**
     * Gets cc
     * @return string[]
     */
    public function getCc()
    {
        return $this->cc;
    }
  
    /**
     * Sets cc
     * @param string[] $cc List of Cc addresses
     * @return $this
     */
    public function setCc($cc)
    {
        
        $this->cc = $cc;
        return $this;
    }
    
    /**
     * Gets bcc
     * @return string[]
     */
    public function getBcc()
    {
        return $this->bcc;
    }
  
    /**
     * Sets bcc
     * @param string[] $bcc List of Bcc addresses
     * @return $this
     */
    public function setBcc($bcc)
    {
        
        $this->bcc = $bcc;
        return $this;
    }
    
    /**
     * Gets subject
     * @return string
     */
    public function getSubject()
    {
        return $this->subject;
    }
  
    /**
     * Sets subject
     * @param string $subject Subject
     * @return $this
     */
    public function setSubject($subject)
    {
        
        $this->subject = $subject;
        return $this;
    }
    
    /**
     * Gets text
     * @return string
     */
    public function getText()
    {
        return $this->text;
    }
  
    /**
     * Sets text
     * @param string $text Text content
     * @return $this
     */
    public function setText($text)
    {
        
        $this->text = $text;
        return $this;
    }
    
    /**
     * Gets html
     * @return string
     */
    public function getHtml()
    {
        return $this->html;
    }
  
    /**
     * Sets html
     * @param string $html HTML content
     * @return $this
     */
    public function setHtml($html)
    {
        
        $this->html = $html;
        return $this;
    }
    
    /**
     * Gets mail_type
     * @return string
     */
    public function getMailType()
    {
        return $this->mail_type;
    }
  
    /**
     * Sets mail_type
     * @param string $mail_type The mail type (see documentation)
     * @return $this
     */
    public function setMailType($mail_type)
    {
        
        $this->mail_type = $mail_type;
        return $this;
    }
    
    /**
     * Gets last_send_error
     * @return \DateTime
     */
    public function getLastSendError()
    {
        return $this->last_send_error;
    }
  
    /**
     * Sets last_send_error
     * @param \DateTime $last_send_error When sending failed last, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setLastSendError($last_send_error)
    {
        
        $this->last_send_error = $last_send_error;
        return $this;
    }
    
    /**
     * Gets first_send_error
     * @return \DateTime
     */
    public function getFirstSendError()
    {
        return $this->first_send_error;
    }
  
    /**
     * Sets first_send_error
     * @param \DateTime $first_send_error When sending failed the first time, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setFirstSendError($first_send_error)
    {
        
        $this->first_send_error = $first_send_error;
        return $this;
    }
    
    /**
     * Gets reply_to
     * @return string
     */
    public function getReplyTo()
    {
        return $this->reply_to;
    }
  
    /**
     * Sets reply_to
     * @param string $reply_to Reply-To address
     * @return $this
     */
    public function setReplyTo($reply_to)
    {
        
        $this->reply_to = $reply_to;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
