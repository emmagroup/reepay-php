<?php
/**
 * UserLogin
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * UserLogin Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserLogin implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'token' => 'string',
        'user' => '\Swagger\Client\Model\User',
        'account' => '\Swagger\Client\Model\AccountLogin',
        'organisation' => '\Swagger\Client\Model\Organisation',
        'organisations' => '\Swagger\Client\Model\OrganisationLogin[]',
        'groups' => 'string[]',
        'permissions' => 'string[]',
        'token_ttl' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'token' => 'token',
        'user' => 'user',
        'account' => 'account',
        'organisation' => 'organisation',
        'organisations' => 'organisations',
        'groups' => 'groups',
        'permissions' => 'permissions',
        'token_ttl' => 'token_ttl'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'token' => 'setToken',
        'user' => 'setUser',
        'account' => 'setAccount',
        'organisation' => 'setOrganisation',
        'organisations' => 'setOrganisations',
        'groups' => 'setGroups',
        'permissions' => 'setPermissions',
        'token_ttl' => 'setTokenTtl'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'token' => 'getToken',
        'user' => 'getUser',
        'account' => 'getAccount',
        'organisation' => 'getOrganisation',
        'organisations' => 'getOrganisations',
        'groups' => 'getGroups',
        'permissions' => 'getPermissions',
        'token_ttl' => 'getTokenTtl'
    );
  
    
    /**
      * $token Authentication token to use in X-Auth-Token
      * @var string
      */
    protected $token;
    
    /**
      * $user Logged in user
      * @var \Swagger\Client\Model\User
      */
    protected $user;
    
    /**
      * $account Account logged into
      * @var \Swagger\Client\Model\AccountLogin
      */
    protected $account;
    
    /**
      * $organisation Organisation for account logged into
      * @var \Swagger\Client\Model\Organisation
      */
    protected $organisation;
    
    /**
      * $organisations List of organisations for user
      * @var \Swagger\Client\Model\OrganisationLogin[]
      */
    protected $organisations;
    
    /**
      * $groups List user groups
      * @var string[]
      */
    protected $groups;
    
    /**
      * $permissions List user permissions
      * @var string[]
      */
    protected $permissions;
    
    /**
      * $token_ttl Token time-to-live in minutes
      * @var int
      */
    protected $token_ttl;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->token = $data["token"];
            $this->user = $data["user"];
            $this->account = $data["account"];
            $this->organisation = $data["organisation"];
            $this->organisations = $data["organisations"];
            $this->groups = $data["groups"];
            $this->permissions = $data["permissions"];
            $this->token_ttl = $data["token_ttl"];
        }
    }
    
    /**
     * Gets token
     * @return string
     */
    public function getToken()
    {
        return $this->token;
    }
  
    /**
     * Sets token
     * @param string $token Authentication token to use in X-Auth-Token
     * @return $this
     */
    public function setToken($token)
    {
        
        $this->token = $token;
        return $this;
    }
    
    /**
     * Gets user
     * @return \Swagger\Client\Model\User
     */
    public function getUser()
    {
        return $this->user;
    }
  
    /**
     * Sets user
     * @param \Swagger\Client\Model\User $user Logged in user
     * @return $this
     */
    public function setUser($user)
    {
        
        $this->user = $user;
        return $this;
    }
    
    /**
     * Gets account
     * @return \Swagger\Client\Model\AccountLogin
     */
    public function getAccount()
    {
        return $this->account;
    }
  
    /**
     * Sets account
     * @param \Swagger\Client\Model\AccountLogin $account Account logged into
     * @return $this
     */
    public function setAccount($account)
    {
        
        $this->account = $account;
        return $this;
    }
    
    /**
     * Gets organisation
     * @return \Swagger\Client\Model\Organisation
     */
    public function getOrganisation()
    {
        return $this->organisation;
    }
  
    /**
     * Sets organisation
     * @param \Swagger\Client\Model\Organisation $organisation Organisation for account logged into
     * @return $this
     */
    public function setOrganisation($organisation)
    {
        
        $this->organisation = $organisation;
        return $this;
    }
    
    /**
     * Gets organisations
     * @return \Swagger\Client\Model\OrganisationLogin[]
     */
    public function getOrganisations()
    {
        return $this->organisations;
    }
  
    /**
     * Sets organisations
     * @param \Swagger\Client\Model\OrganisationLogin[] $organisations List of organisations for user
     * @return $this
     */
    public function setOrganisations($organisations)
    {
        
        $this->organisations = $organisations;
        return $this;
    }
    
    /**
     * Gets groups
     * @return string[]
     */
    public function getGroups()
    {
        return $this->groups;
    }
  
    /**
     * Sets groups
     * @param string[] $groups List user groups
     * @return $this
     */
    public function setGroups($groups)
    {
        
        $this->groups = $groups;
        return $this;
    }
    
    /**
     * Gets permissions
     * @return string[]
     */
    public function getPermissions()
    {
        return $this->permissions;
    }
  
    /**
     * Sets permissions
     * @param string[] $permissions List user permissions
     * @return $this
     */
    public function setPermissions($permissions)
    {
        
        $this->permissions = $permissions;
        return $this;
    }
    
    /**
     * Gets token_ttl
     * @return int
     */
    public function getTokenTtl()
    {
        return $this->token_ttl;
    }
  
    /**
     * Sets token_ttl
     * @param int $token_ttl Token time-to-live in minutes
     * @return $this
     */
    public function setTokenTtl($token_ttl)
    {
        
        $this->token_ttl = $token_ttl;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
