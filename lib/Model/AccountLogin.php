<?php
/**
 * AccountLogin
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * AccountLogin Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AccountLogin implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'state' => 'string',
        'organisation' => 'string',
        'handle' => 'string',
        'currency' => 'string',
        'name' => 'string',
        'locale' => 'string',
        'timezone' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'state' => 'state',
        'organisation' => 'organisation',
        'handle' => 'handle',
        'currency' => 'currency',
        'name' => 'name',
        'locale' => 'locale',
        'timezone' => 'timezone'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'state' => 'setState',
        'organisation' => 'setOrganisation',
        'handle' => 'setHandle',
        'currency' => 'setCurrency',
        'name' => 'setName',
        'locale' => 'setLocale',
        'timezone' => 'setTimezone'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'state' => 'getState',
        'organisation' => 'getOrganisation',
        'handle' => 'getHandle',
        'currency' => 'getCurrency',
        'name' => 'getName',
        'locale' => 'getLocale',
        'timezone' => 'getTimezone'
    );
  
    
    /**
      * $id Account id assigned by Reepay
      * @var string
      */
    protected $id;
    
    /**
      * $state Status of the account one of the following `test`, `live`, `closed`, `demo`.
      * @var string
      */
    protected $state;
    
    /**
      * $organisation Organisation by subdomain handle
      * @var string
      */
    protected $organisation;
    
    /**
      * $handle Per organisation unique handle for the account
      * @var string
      */
    protected $handle;
    
    /**
      * $currency Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code
      * @var string
      */
    protected $currency;
    
    /**
      * $name Account name
      * @var string
      */
    protected $name;
    
    /**
      * $locale Account locale on the form 'language_country'
      * @var string
      */
    protected $locale;
    
    /**
      * $timezone Account time zone ID as abbreviation or full name. See [Wikipedia](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
      * @var string
      */
    protected $timezone;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->state = $data["state"];
            $this->organisation = $data["organisation"];
            $this->handle = $data["handle"];
            $this->currency = $data["currency"];
            $this->name = $data["name"];
            $this->locale = $data["locale"];
            $this->timezone = $data["timezone"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Account id assigned by Reepay
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }
  
    /**
     * Sets state
     * @param string $state Status of the account one of the following `test`, `live`, `closed`, `demo`.
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array("test", "live", "closed", "demo");
        if (!in_array($state, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'test', 'live', 'closed', 'demo'");
        }
        $this->state = $state;
        return $this;
    }
    
    /**
     * Gets organisation
     * @return string
     */
    public function getOrganisation()
    {
        return $this->organisation;
    }
  
    /**
     * Sets organisation
     * @param string $organisation Organisation by subdomain handle
     * @return $this
     */
    public function setOrganisation($organisation)
    {
        
        $this->organisation = $organisation;
        return $this;
    }
    
    /**
     * Gets handle
     * @return string
     */
    public function getHandle()
    {
        return $this->handle;
    }
  
    /**
     * Sets handle
     * @param string $handle Per organisation unique handle for the account
     * @return $this
     */
    public function setHandle($handle)
    {
        
        $this->handle = $handle;
        return $this;
    }
    
    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }
  
    /**
     * Sets currency
     * @param string $currency Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code
     * @return $this
     */
    public function setCurrency($currency)
    {
        
        $this->currency = $currency;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Account name
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets locale
     * @return string
     */
    public function getLocale()
    {
        return $this->locale;
    }
  
    /**
     * Sets locale
     * @param string $locale Account locale on the form 'language_country'
     * @return $this
     */
    public function setLocale($locale)
    {
        
        $this->locale = $locale;
        return $this;
    }
    
    /**
     * Gets timezone
     * @return string
     */
    public function getTimezone()
    {
        return $this->timezone;
    }
  
    /**
     * Sets timezone
     * @param string $timezone Account time zone ID as abbreviation or full name. See [Wikipedia](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     * @return $this
     */
    public function setTimezone($timezone)
    {
        
        $this->timezone = $timezone;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
