<?php
/**
 * SubscriptionDiscount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * SubscriptionDiscount Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionDiscount implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'handle' => 'string',
        'discount' => 'string',
        'state' => 'string',
        'deleted' => '\DateTime',
        'created' => '\DateTime',
        'name' => 'string',
        'description' => 'string',
        'amount' => 'int',
        'percentage' => 'int',
        'count' => 'int',
        'invoices' => 'string[]',
        'apply_to' => 'string[]',
        'fixed_count' => 'int',
        'fixed_period_unit' => 'string',
        'fixed_period' => 'int',
        'fixed_usage_reached' => 'bool',
        'fixed_period_passed' => 'bool'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'handle' => 'handle',
        'discount' => 'discount',
        'state' => 'state',
        'deleted' => 'deleted',
        'created' => 'created',
        'name' => 'name',
        'description' => 'description',
        'amount' => 'amount',
        'percentage' => 'percentage',
        'count' => 'count',
        'invoices' => 'invoices',
        'apply_to' => 'apply_to',
        'fixed_count' => 'fixed_count',
        'fixed_period_unit' => 'fixed_period_unit',
        'fixed_period' => 'fixed_period',
        'fixed_usage_reached' => 'fixed_usage_reached',
        'fixed_period_passed' => 'fixed_period_passed'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'handle' => 'setHandle',
        'discount' => 'setDiscount',
        'state' => 'setState',
        'deleted' => 'setDeleted',
        'created' => 'setCreated',
        'name' => 'setName',
        'description' => 'setDescription',
        'amount' => 'setAmount',
        'percentage' => 'setPercentage',
        'count' => 'setCount',
        'invoices' => 'setInvoices',
        'apply_to' => 'setApplyTo',
        'fixed_count' => 'setFixedCount',
        'fixed_period_unit' => 'setFixedPeriodUnit',
        'fixed_period' => 'setFixedPeriod',
        'fixed_usage_reached' => 'setFixedUsageReached',
        'fixed_period_passed' => 'setFixedPeriodPassed'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'handle' => 'getHandle',
        'discount' => 'getDiscount',
        'state' => 'getState',
        'deleted' => 'getDeleted',
        'created' => 'getCreated',
        'name' => 'getName',
        'description' => 'getDescription',
        'amount' => 'getAmount',
        'percentage' => 'getPercentage',
        'count' => 'getCount',
        'invoices' => 'getInvoices',
        'apply_to' => 'getApplyTo',
        'fixed_count' => 'getFixedCount',
        'fixed_period_unit' => 'getFixedPeriodUnit',
        'fixed_period' => 'getFixedPeriod',
        'fixed_usage_reached' => 'getFixedUsageReached',
        'fixed_period_passed' => 'getFixedPeriodPassed'
    );
  
    
    /**
      * $handle Per subscription unique handle for the subscription discount.
      * @var string
      */
    protected $handle;
    
    /**
      * $discount Discount for subscription discount
      * @var string
      */
    protected $discount;
    
    /**
      * $state Discount state `active` or `disabled`.
      * @var string
      */
    protected $state;
    
    /**
      * $deleted Date when the discount was deleted if deleted. In ISO-8601 extended offset date-time format.
      * @var \DateTime
      */
    protected $deleted;
    
    /**
      * $created Date when the discount was created. In ISO-8601 extended offset date-time format.
      * @var \DateTime
      */
    protected $created;
    
    /**
      * $name Name of discount. Will be used as order line text.
      * @var string
      */
    protected $name;
    
    /**
      * $description Optional description of discount
      * @var string
      */
    protected $description;
    
    /**
      * $amount Fixed amount discount deducted from order line amounts including VAT
      * @var int
      */
    protected $amount;
    
    /**
      * $percentage Percentage discount applied to each applicable order line
      * @var int
      */
    protected $percentage;
    
    /**
      * $count Number of invoices this subscription discount has been applied to
      * @var int
      */
    protected $count;
    
    /**
      * $invoices List of invoices this subscription discount has been applied to
      * @var string[]
      */
    protected $invoices;
    
    /**
      * $apply_to Which order lines the discount is applicable to: `all`, `setup_fee`, `plan`, `additional_cost`, `add_on` and `ondemand`
      * @var string[]
      */
    protected $apply_to;
    
    /**
      * $fixed_count Apply discount to a fixed number of invoices
      * @var int
      */
    protected $fixed_count;
    
    /**
      * $fixed_period_unit Time unit use for fixed valid period
      * @var string
      */
    protected $fixed_period_unit;
    
    /**
      * $fixed_period Fixed period length e.g. 12 months or 14 days
      * @var int
      */
    protected $fixed_period;
    
    /**
      * $fixed_usage_reached Whether fixed usage for subscription discount has been reached
      * @var bool
      */
    protected $fixed_usage_reached = false;
    
    /**
      * $fixed_period_passed Whether fixed period for subscription discount has been passed
      * @var bool
      */
    protected $fixed_period_passed = false;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->handle = $data["handle"];
            $this->discount = $data["discount"];
            $this->state = $data["state"];
            $this->deleted = $data["deleted"];
            $this->created = $data["created"];
            $this->name = $data["name"];
            $this->description = $data["description"];
            $this->amount = $data["amount"];
            $this->percentage = $data["percentage"];
            $this->count = $data["count"];
            $this->invoices = $data["invoices"];
            $this->apply_to = $data["apply_to"];
            $this->fixed_count = $data["fixed_count"];
            $this->fixed_period_unit = $data["fixed_period_unit"];
            $this->fixed_period = $data["fixed_period"];
            $this->fixed_usage_reached = $data["fixed_usage_reached"];
            $this->fixed_period_passed = $data["fixed_period_passed"];
        }
    }
    
    /**
     * Gets handle
     * @return string
     */
    public function getHandle()
    {
        return $this->handle;
    }
  
    /**
     * Sets handle
     * @param string $handle Per subscription unique handle for the subscription discount.
     * @return $this
     */
    public function setHandle($handle)
    {
        
        $this->handle = $handle;
        return $this;
    }
    
    /**
     * Gets discount
     * @return string
     */
    public function getDiscount()
    {
        return $this->discount;
    }
  
    /**
     * Sets discount
     * @param string $discount Discount for subscription discount
     * @return $this
     */
    public function setDiscount($discount)
    {
        
        $this->discount = $discount;
        return $this;
    }
    
    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }
  
    /**
     * Sets state
     * @param string $state Discount state `active` or `disabled`.
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array("active", "disabled");
        if (!in_array($state, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'active', 'disabled'");
        }
        $this->state = $state;
        return $this;
    }
    
    /**
     * Gets deleted
     * @return \DateTime
     */
    public function getDeleted()
    {
        return $this->deleted;
    }
  
    /**
     * Sets deleted
     * @param \DateTime $deleted Date when the discount was deleted if deleted. In ISO-8601 extended offset date-time format.
     * @return $this
     */
    public function setDeleted($deleted)
    {
        
        $this->deleted = $deleted;
        return $this;
    }
    
    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }
  
    /**
     * Sets created
     * @param \DateTime $created Date when the discount was created. In ISO-8601 extended offset date-time format.
     * @return $this
     */
    public function setCreated($created)
    {
        
        $this->created = $created;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Name of discount. Will be used as order line text.
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description Optional description of discount
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets amount
     * @return int
     */
    public function getAmount()
    {
        return $this->amount;
    }
  
    /**
     * Sets amount
     * @param int $amount Fixed amount discount deducted from order line amounts including VAT
     * @return $this
     */
    public function setAmount($amount)
    {
        
        $this->amount = $amount;
        return $this;
    }
    
    /**
     * Gets percentage
     * @return int
     */
    public function getPercentage()
    {
        return $this->percentage;
    }
  
    /**
     * Sets percentage
     * @param int $percentage Percentage discount applied to each applicable order line
     * @return $this
     */
    public function setPercentage($percentage)
    {
        
        $this->percentage = $percentage;
        return $this;
    }
    
    /**
     * Gets count
     * @return int
     */
    public function getCount()
    {
        return $this->count;
    }
  
    /**
     * Sets count
     * @param int $count Number of invoices this subscription discount has been applied to
     * @return $this
     */
    public function setCount($count)
    {
        
        $this->count = $count;
        return $this;
    }
    
    /**
     * Gets invoices
     * @return string[]
     */
    public function getInvoices()
    {
        return $this->invoices;
    }
  
    /**
     * Sets invoices
     * @param string[] $invoices List of invoices this subscription discount has been applied to
     * @return $this
     */
    public function setInvoices($invoices)
    {
        
        $this->invoices = $invoices;
        return $this;
    }
    
    /**
     * Gets apply_to
     * @return string[]
     */
    public function getApplyTo()
    {
        return $this->apply_to;
    }
  
    /**
     * Sets apply_to
     * @param string[] $apply_to Which order lines the discount is applicable to: `all`, `setup_fee`, `plan`, `additional_cost`, `add_on` and `ondemand`
     * @return $this
     */
    public function setApplyTo($apply_to)
    {
        
        $this->apply_to = $apply_to;
        return $this;
    }
    
    /**
     * Gets fixed_count
     * @return int
     */
    public function getFixedCount()
    {
        return $this->fixed_count;
    }
  
    /**
     * Sets fixed_count
     * @param int $fixed_count Apply discount to a fixed number of invoices
     * @return $this
     */
    public function setFixedCount($fixed_count)
    {
        
        $this->fixed_count = $fixed_count;
        return $this;
    }
    
    /**
     * Gets fixed_period_unit
     * @return string
     */
    public function getFixedPeriodUnit()
    {
        return $this->fixed_period_unit;
    }
  
    /**
     * Sets fixed_period_unit
     * @param string $fixed_period_unit Time unit use for fixed valid period
     * @return $this
     */
    public function setFixedPeriodUnit($fixed_period_unit)
    {
        $allowed_values = array("months", "days");
        if (!in_array($fixed_period_unit, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'fixed_period_unit', must be one of 'months', 'days'");
        }
        $this->fixed_period_unit = $fixed_period_unit;
        return $this;
    }
    
    /**
     * Gets fixed_period
     * @return int
     */
    public function getFixedPeriod()
    {
        return $this->fixed_period;
    }
  
    /**
     * Sets fixed_period
     * @param int $fixed_period Fixed period length e.g. 12 months or 14 days
     * @return $this
     */
    public function setFixedPeriod($fixed_period)
    {
        
        $this->fixed_period = $fixed_period;
        return $this;
    }
    
    /**
     * Gets fixed_usage_reached
     * @return bool
     */
    public function getFixedUsageReached()
    {
        return $this->fixed_usage_reached;
    }
  
    /**
     * Sets fixed_usage_reached
     * @param bool $fixed_usage_reached Whether fixed usage for subscription discount has been reached
     * @return $this
     */
    public function setFixedUsageReached($fixed_usage_reached)
    {
        
        $this->fixed_usage_reached = $fixed_usage_reached;
        return $this;
    }
    
    /**
     * Gets fixed_period_passed
     * @return bool
     */
    public function getFixedPeriodPassed()
    {
        return $this->fixed_period_passed;
    }
  
    /**
     * Sets fixed_period_passed
     * @param bool $fixed_period_passed Whether fixed period for subscription discount has been passed
     * @return $this
     */
    public function setFixedPeriodPassed($fixed_period_passed)
    {
        
        $this->fixed_period_passed = $fixed_period_passed;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
