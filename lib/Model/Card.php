<?php
/**
 * Card
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Card Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Card implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'state' => 'string',
        'customer' => 'string',
        'failed' => '\DateTime',
        'created' => '\DateTime',
        'gw_ref' => 'string',
        'card_type' => 'string',
        'exp_date' => 'string',
        'masked_card' => 'string',
        'last_success' => '\DateTime',
        'last_failed' => '\DateTime',
        'first_fail' => '\DateTime',
        'error_code' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'state' => 'state',
        'customer' => 'customer',
        'failed' => 'failed',
        'created' => 'created',
        'gw_ref' => 'gw_ref',
        'card_type' => 'card_type',
        'exp_date' => 'exp_date',
        'masked_card' => 'masked_card',
        'last_success' => 'last_success',
        'last_failed' => 'last_failed',
        'first_fail' => 'first_fail',
        'error_code' => 'error_code'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'state' => 'setState',
        'customer' => 'setCustomer',
        'failed' => 'setFailed',
        'created' => 'setCreated',
        'gw_ref' => 'setGwRef',
        'card_type' => 'setCardType',
        'exp_date' => 'setExpDate',
        'masked_card' => 'setMaskedCard',
        'last_success' => 'setLastSuccess',
        'last_failed' => 'setLastFailed',
        'first_fail' => 'setFirstFail',
        'error_code' => 'setErrorCode'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'state' => 'getState',
        'customer' => 'getCustomer',
        'failed' => 'getFailed',
        'created' => 'getCreated',
        'gw_ref' => 'getGwRef',
        'card_type' => 'getCardType',
        'exp_date' => 'getExpDate',
        'masked_card' => 'getMaskedCard',
        'last_success' => 'getLastSuccess',
        'last_failed' => 'getLastFailed',
        'first_fail' => 'getFirstFail',
        'error_code' => 'getErrorCode'
    );
  
    
    /**
      * $id Unique id for payment method
      * @var string
      */
    protected $id;
    
    /**
      * $state State of the payment method: `active`, `inactivated` or `failed`
      * @var string
      */
    protected $state;
    
    /**
      * $customer Customer by handle
      * @var string
      */
    protected $customer;
    
    /**
      * $failed Date when the payment method failed. In ISO-8601 extended offset date-time format.
      * @var \DateTime
      */
    protected $failed;
    
    /**
      * $created Date when the payment method was created. In ISO-8601 extended offset date-time format.
      * @var \DateTime
      */
    protected $created;
    
    /**
      * $gw_ref Card gateway reference id
      * @var string
      */
    protected $gw_ref;
    
    /**
      * $card_type Card type
      * @var string
      */
    protected $card_type;
    
    /**
      * $exp_date Card expire date on form MM-YY
      * @var string
      */
    protected $exp_date;
    
    /**
      * $masked_card Masked card number
      * @var string
      */
    protected $masked_card;
    
    /**
      * $last_success Date and time of last succesfull use of the card. In ISO-8601 extended offset date-time format.
      * @var \DateTime
      */
    protected $last_success;
    
    /**
      * $last_failed Date and time of last failed use of the card. In ISO-8601 extended offset date-time format.
      * @var \DateTime
      */
    protected $last_failed;
    
    /**
      * $first_fail Date and time of first succesfull use of the card. In ISO-8601 extended offset date-time format.
      * @var \DateTime
      */
    protected $first_fail;
    
    /**
      * $error_code An error code from the last failed use of the card
      * @var string
      */
    protected $error_code;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->state = $data["state"];
            $this->customer = $data["customer"];
            $this->failed = $data["failed"];
            $this->created = $data["created"];
            $this->gw_ref = $data["gw_ref"];
            $this->card_type = $data["card_type"];
            $this->exp_date = $data["exp_date"];
            $this->masked_card = $data["masked_card"];
            $this->last_success = $data["last_success"];
            $this->last_failed = $data["last_failed"];
            $this->first_fail = $data["first_fail"];
            $this->error_code = $data["error_code"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Unique id for payment method
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }
  
    /**
     * Sets state
     * @param string $state State of the payment method: `active`, `inactivated` or `failed`
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array("active", "inactivated", "failed");
        if (!in_array($state, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'active', 'inactivated', 'failed'");
        }
        $this->state = $state;
        return $this;
    }
    
    /**
     * Gets customer
     * @return string
     */
    public function getCustomer()
    {
        return $this->customer;
    }
  
    /**
     * Sets customer
     * @param string $customer Customer by handle
     * @return $this
     */
    public function setCustomer($customer)
    {
        
        $this->customer = $customer;
        return $this;
    }
    
    /**
     * Gets failed
     * @return \DateTime
     */
    public function getFailed()
    {
        return $this->failed;
    }
  
    /**
     * Sets failed
     * @param \DateTime $failed Date when the payment method failed. In ISO-8601 extended offset date-time format.
     * @return $this
     */
    public function setFailed($failed)
    {
        
        $this->failed = $failed;
        return $this;
    }
    
    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }
  
    /**
     * Sets created
     * @param \DateTime $created Date when the payment method was created. In ISO-8601 extended offset date-time format.
     * @return $this
     */
    public function setCreated($created)
    {
        
        $this->created = $created;
        return $this;
    }
    
    /**
     * Gets gw_ref
     * @return string
     */
    public function getGwRef()
    {
        return $this->gw_ref;
    }
  
    /**
     * Sets gw_ref
     * @param string $gw_ref Card gateway reference id
     * @return $this
     */
    public function setGwRef($gw_ref)
    {
        
        $this->gw_ref = $gw_ref;
        return $this;
    }
    
    /**
     * Gets card_type
     * @return string
     */
    public function getCardType()
    {
        return $this->card_type;
    }
  
    /**
     * Sets card_type
     * @param string $card_type Card type
     * @return $this
     */
    public function setCardType($card_type)
    {
        $allowed_values = array("unknown", "visa", "mc", "dankort", "visa_dk", "visa_elec", "maestro", "laser", "amex", "diners", "discover", "jcb");
        if (!in_array($card_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'card_type', must be one of 'unknown', 'visa', 'mc', 'dankort', 'visa_dk', 'visa_elec', 'maestro', 'laser', 'amex', 'diners', 'discover', 'jcb'");
        }
        $this->card_type = $card_type;
        return $this;
    }
    
    /**
     * Gets exp_date
     * @return string
     */
    public function getExpDate()
    {
        return $this->exp_date;
    }
  
    /**
     * Sets exp_date
     * @param string $exp_date Card expire date on form MM-YY
     * @return $this
     */
    public function setExpDate($exp_date)
    {
        
        $this->exp_date = $exp_date;
        return $this;
    }
    
    /**
     * Gets masked_card
     * @return string
     */
    public function getMaskedCard()
    {
        return $this->masked_card;
    }
  
    /**
     * Sets masked_card
     * @param string $masked_card Masked card number
     * @return $this
     */
    public function setMaskedCard($masked_card)
    {
        
        $this->masked_card = $masked_card;
        return $this;
    }
    
    /**
     * Gets last_success
     * @return \DateTime
     */
    public function getLastSuccess()
    {
        return $this->last_success;
    }
  
    /**
     * Sets last_success
     * @param \DateTime $last_success Date and time of last succesfull use of the card. In ISO-8601 extended offset date-time format.
     * @return $this
     */
    public function setLastSuccess($last_success)
    {
        
        $this->last_success = $last_success;
        return $this;
    }
    
    /**
     * Gets last_failed
     * @return \DateTime
     */
    public function getLastFailed()
    {
        return $this->last_failed;
    }
  
    /**
     * Sets last_failed
     * @param \DateTime $last_failed Date and time of last failed use of the card. In ISO-8601 extended offset date-time format.
     * @return $this
     */
    public function setLastFailed($last_failed)
    {
        
        $this->last_failed = $last_failed;
        return $this;
    }
    
    /**
     * Gets first_fail
     * @return \DateTime
     */
    public function getFirstFail()
    {
        return $this->first_fail;
    }
  
    /**
     * Sets first_fail
     * @param \DateTime $first_fail Date and time of first succesfull use of the card. In ISO-8601 extended offset date-time format.
     * @return $this
     */
    public function setFirstFail($first_fail)
    {
        
        $this->first_fail = $first_fail;
        return $this;
    }
    
    /**
     * Gets error_code
     * @return string
     */
    public function getErrorCode()
    {
        return $this->error_code;
    }
  
    /**
     * Sets error_code
     * @param string $error_code An error code from the last failed use of the card
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        
        $this->error_code = $error_code;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
