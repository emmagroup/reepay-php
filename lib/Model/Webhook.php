<?php
/**
 * Webhook
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Webhook Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Webhook implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'event' => 'string',
        'state' => 'string',
        'url' => 'string',
        'username' => 'string',
        'password' => 'string',
        'content' => 'string',
        'created' => '\DateTime',
        'success' => '\DateTime',
        'count' => 'int',
        'last_fail' => '\DateTime',
        'first_fail' => '\DateTime',
        'alert_count' => 'int',
        'alert_sent' => '\DateTime'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'event' => 'event',
        'state' => 'state',
        'url' => 'url',
        'username' => 'username',
        'password' => 'password',
        'content' => 'content',
        'created' => 'created',
        'success' => 'success',
        'count' => 'count',
        'last_fail' => 'last_fail',
        'first_fail' => 'first_fail',
        'alert_count' => 'alert_count',
        'alert_sent' => 'alert_sent'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'event' => 'setEvent',
        'state' => 'setState',
        'url' => 'setUrl',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'content' => 'setContent',
        'created' => 'setCreated',
        'success' => 'setSuccess',
        'count' => 'setCount',
        'last_fail' => 'setLastFail',
        'first_fail' => 'setFirstFail',
        'alert_count' => 'setAlertCount',
        'alert_sent' => 'setAlertSent'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'event' => 'getEvent',
        'state' => 'getState',
        'url' => 'getUrl',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'content' => 'getContent',
        'created' => 'getCreated',
        'success' => 'getSuccess',
        'count' => 'getCount',
        'last_fail' => 'getLastFail',
        'first_fail' => 'getFirstFail',
        'alert_count' => 'getAlertCount',
        'alert_sent' => 'getAlertSent'
    );
  
    
    /**
      * $id Unique webhook id assigned by Reepay
      * @var string
      */
    protected $id;
    
    /**
      * $event Event id of the event this webhook is for
      * @var string
      */
    protected $event;
    
    /**
      * $state The webhook state, one of the following: `pending`, `disabled`, `failed`, `completed`
      * @var string
      */
    protected $state;
    
    /**
      * $url Webhook url
      * @var string
      */
    protected $url;
    
    /**
      * $username Optional basic auth username
      * @var string
      */
    protected $username;
    
    /**
      * $password Optional basic auth password (masked)
      * @var string
      */
    protected $password;
    
    /**
      * $content JSON content of the webhook
      * @var string
      */
    protected $content;
    
    /**
      * $created Creation date in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
      * @var \DateTime
      */
    protected $created;
    
    /**
      * $success Date of successful invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
      * @var \DateTime
      */
    protected $success;
    
    /**
      * $count Number of invocations performed
      * @var int
      */
    protected $count;
    
    /**
      * $last_fail Date of last failed invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
      * @var \DateTime
      */
    protected $last_fail;
    
    /**
      * $first_fail Date of first failed invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
      * @var \DateTime
      */
    protected $first_fail;
    
    /**
      * $alert_count Number of failed invocations before an alert email is sent
      * @var int
      */
    protected $alert_count;
    
    /**
      * $alert_sent Date when an optional alert email sending was requested in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
      * @var \DateTime
      */
    protected $alert_sent;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->event = $data["event"];
            $this->state = $data["state"];
            $this->url = $data["url"];
            $this->username = $data["username"];
            $this->password = $data["password"];
            $this->content = $data["content"];
            $this->created = $data["created"];
            $this->success = $data["success"];
            $this->count = $data["count"];
            $this->last_fail = $data["last_fail"];
            $this->first_fail = $data["first_fail"];
            $this->alert_count = $data["alert_count"];
            $this->alert_sent = $data["alert_sent"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Unique webhook id assigned by Reepay
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets event
     * @return string
     */
    public function getEvent()
    {
        return $this->event;
    }
  
    /**
     * Sets event
     * @param string $event Event id of the event this webhook is for
     * @return $this
     */
    public function setEvent($event)
    {
        
        $this->event = $event;
        return $this;
    }
    
    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }
  
    /**
     * Sets state
     * @param string $state The webhook state, one of the following: `pending`, `disabled`, `failed`, `completed`
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array("pending", "disabled", "failed", "completed");
        if (!in_array($state, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'pending', 'disabled', 'failed', 'completed'");
        }
        $this->state = $state;
        return $this;
    }
    
    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }
  
    /**
     * Sets url
     * @param string $url Webhook url
     * @return $this
     */
    public function setUrl($url)
    {
        
        $this->url = $url;
        return $this;
    }
    
    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }
  
    /**
     * Sets username
     * @param string $username Optional basic auth username
     * @return $this
     */
    public function setUsername($username)
    {
        
        $this->username = $username;
        return $this;
    }
    
    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }
  
    /**
     * Sets password
     * @param string $password Optional basic auth password (masked)
     * @return $this
     */
    public function setPassword($password)
    {
        
        $this->password = $password;
        return $this;
    }
    
    /**
     * Gets content
     * @return string
     */
    public function getContent()
    {
        return $this->content;
    }
  
    /**
     * Sets content
     * @param string $content JSON content of the webhook
     * @return $this
     */
    public function setContent($content)
    {
        
        $this->content = $content;
        return $this;
    }
    
    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }
  
    /**
     * Sets created
     * @param \DateTime $created Creation date in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setCreated($created)
    {
        
        $this->created = $created;
        return $this;
    }
    
    /**
     * Gets success
     * @return \DateTime
     */
    public function getSuccess()
    {
        return $this->success;
    }
  
    /**
     * Sets success
     * @param \DateTime $success Date of successful invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setSuccess($success)
    {
        
        $this->success = $success;
        return $this;
    }
    
    /**
     * Gets count
     * @return int
     */
    public function getCount()
    {
        return $this->count;
    }
  
    /**
     * Sets count
     * @param int $count Number of invocations performed
     * @return $this
     */
    public function setCount($count)
    {
        
        $this->count = $count;
        return $this;
    }
    
    /**
     * Gets last_fail
     * @return \DateTime
     */
    public function getLastFail()
    {
        return $this->last_fail;
    }
  
    /**
     * Sets last_fail
     * @param \DateTime $last_fail Date of last failed invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setLastFail($last_fail)
    {
        
        $this->last_fail = $last_fail;
        return $this;
    }
    
    /**
     * Gets first_fail
     * @return \DateTime
     */
    public function getFirstFail()
    {
        return $this->first_fail;
    }
  
    /**
     * Sets first_fail
     * @param \DateTime $first_fail Date of first failed invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setFirstFail($first_fail)
    {
        
        $this->first_fail = $first_fail;
        return $this;
    }
    
    /**
     * Gets alert_count
     * @return int
     */
    public function getAlertCount()
    {
        return $this->alert_count;
    }
  
    /**
     * Sets alert_count
     * @param int $alert_count Number of failed invocations before an alert email is sent
     * @return $this
     */
    public function setAlertCount($alert_count)
    {
        
        $this->alert_count = $alert_count;
        return $this;
    }
    
    /**
     * Gets alert_sent
     * @return \DateTime
     */
    public function getAlertSent()
    {
        return $this->alert_sent;
    }
  
    /**
     * Sets alert_sent
     * @param \DateTime $alert_sent Date when an optional alert email sending was requested in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     * @return $this
     */
    public function setAlertSent($alert_sent)
    {
        
        $this->alert_sent = $alert_sent;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
