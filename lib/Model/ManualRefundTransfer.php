<?php
/**
 * ManualRefundTransfer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * ManualRefundTransfer Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ManualRefundTransfer implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'comment' => 'string',
        'reference' => 'string',
        'method' => 'string',
        'payment_date' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'comment' => 'comment',
        'reference' => 'reference',
        'method' => 'method',
        'payment_date' => 'payment_date'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'comment' => 'setComment',
        'reference' => 'setReference',
        'method' => 'setMethod',
        'payment_date' => 'setPaymentDate'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'comment' => 'getComment',
        'reference' => 'getReference',
        'method' => 'getMethod',
        'payment_date' => 'getPaymentDate'
    );
  
    
    /**
      * $comment Optional comment for manual transaction
      * @var string
      */
    protected $comment;
    
    /**
      * $reference Optional reference for the manual transaction
      * @var string
      */
    protected $reference;
    
    /**
      * $method The refund method used for the offline manual transaction, allowable values: `cash`, `chargeback`, `bank_transfer`, `check`, `other`
      * @var string
      */
    protected $method;
    
    /**
      * $payment_date When the manual transaction was performed on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`
      * @var string
      */
    protected $payment_date;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->comment = $data["comment"];
            $this->reference = $data["reference"];
            $this->method = $data["method"];
            $this->payment_date = $data["payment_date"];
        }
    }
    
    /**
     * Gets comment
     * @return string
     */
    public function getComment()
    {
        return $this->comment;
    }
  
    /**
     * Sets comment
     * @param string $comment Optional comment for manual transaction
     * @return $this
     */
    public function setComment($comment)
    {
        
        $this->comment = $comment;
        return $this;
    }
    
    /**
     * Gets reference
     * @return string
     */
    public function getReference()
    {
        return $this->reference;
    }
  
    /**
     * Sets reference
     * @param string $reference Optional reference for the manual transaction
     * @return $this
     */
    public function setReference($reference)
    {
        
        $this->reference = $reference;
        return $this;
    }
    
    /**
     * Gets method
     * @return string
     */
    public function getMethod()
    {
        return $this->method;
    }
  
    /**
     * Sets method
     * @param string $method The refund method used for the offline manual transaction, allowable values: `cash`, `chargeback`, `bank_transfer`, `check`, `other`
     * @return $this
     */
    public function setMethod($method)
    {
        $allowed_values = array("cash", "chargeback", "bank_transfer", "check", "other");
        if (!in_array($method, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'method', must be one of 'cash', 'chargeback', 'bank_transfer', 'check', 'other'");
        }
        $this->method = $method;
        return $this;
    }
    
    /**
     * Gets payment_date
     * @return string
     */
    public function getPaymentDate()
    {
        return $this->payment_date;
    }
  
    /**
     * Sets payment_date
     * @param string $payment_date When the manual transaction was performed on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {
        
        $this->payment_date = $payment_date;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
