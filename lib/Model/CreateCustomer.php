<?php
/**
 * CreateCustomer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * CreateCustomer Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateCustomer implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'email' => 'string',
        'address' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'country' => 'string',
        'phone' => 'string',
        'company' => 'string',
        'vat' => 'string',
        'handle' => 'string',
        'test' => 'bool',
        'first_name' => 'string',
        'last_name' => 'string',
        'postal_code' => 'string',
        'generate_handle' => 'bool'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'email' => 'email',
        'address' => 'address',
        'address2' => 'address2',
        'city' => 'city',
        'country' => 'country',
        'phone' => 'phone',
        'company' => 'company',
        'vat' => 'vat',
        'handle' => 'handle',
        'test' => 'test',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'postal_code' => 'postal_code',
        'generate_handle' => 'generate_handle'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'email' => 'setEmail',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'country' => 'setCountry',
        'phone' => 'setPhone',
        'company' => 'setCompany',
        'vat' => 'setVat',
        'handle' => 'setHandle',
        'test' => 'setTest',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'postal_code' => 'setPostalCode',
        'generate_handle' => 'setGenerateHandle'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'email' => 'getEmail',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'country' => 'getCountry',
        'phone' => 'getPhone',
        'company' => 'getCompany',
        'vat' => 'getVat',
        'handle' => 'getHandle',
        'test' => 'getTest',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'postal_code' => 'getPostalCode',
        'generate_handle' => 'getGenerateHandle'
    );
  
    
    /**
      * $email Customer email
      * @var string
      */
    protected $email;
    
    /**
      * $address Customer address
      * @var string
      */
    protected $address;
    
    /**
      * $address2 Customer address2
      * @var string
      */
    protected $address2;
    
    /**
      * $city Customer city
      * @var string
      */
    protected $city;
    
    /**
      * $country Customer country in ISO 3166-1 alpha-2
      * @var string
      */
    protected $country;
    
    /**
      * $phone Customer phone number
      * @var string
      */
    protected $phone;
    
    /**
      * $company Customer company
      * @var string
      */
    protected $company;
    
    /**
      * $vat Customer vat number
      * @var string
      */
    protected $vat;
    
    /**
      * $handle Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle is not defined.
      * @var string
      */
    protected $handle;
    
    /**
      * $test Test flag. If given it will be verified that the account state matches the intended create state.
      * @var bool
      */
    protected $test = false;
    
    /**
      * $first_name Customer first name
      * @var string
      */
    protected $first_name;
    
    /**
      * $last_name Customer last name
      * @var string
      */
    protected $last_name;
    
    /**
      * $postal_code Customer postal code
      * @var string
      */
    protected $postal_code;
    
    /**
      * $generate_handle Auto generate handle on the form cust-[sequence_number]
      * @var bool
      */
    protected $generate_handle = false;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->email = $data["email"];
            $this->address = $data["address"];
            $this->address2 = $data["address2"];
            $this->city = $data["city"];
            $this->country = $data["country"];
            $this->phone = $data["phone"];
            $this->company = $data["company"];
            $this->vat = $data["vat"];
            $this->handle = $data["handle"];
            $this->test = $data["test"];
            $this->first_name = $data["first_name"];
            $this->last_name = $data["last_name"];
            $this->postal_code = $data["postal_code"];
            $this->generate_handle = $data["generate_handle"];
        }
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email Customer email
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Gets address
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }
  
    /**
     * Sets address
     * @param string $address Customer address
     * @return $this
     */
    public function setAddress($address)
    {
        
        $this->address = $address;
        return $this;
    }
    
    /**
     * Gets address2
     * @return string
     */
    public function getAddress2()
    {
        return $this->address2;
    }
  
    /**
     * Sets address2
     * @param string $address2 Customer address2
     * @return $this
     */
    public function setAddress2($address2)
    {
        
        $this->address2 = $address2;
        return $this;
    }
    
    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }
  
    /**
     * Sets city
     * @param string $city Customer city
     * @return $this
     */
    public function setCity($city)
    {
        
        $this->city = $city;
        return $this;
    }
    
    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }
  
    /**
     * Sets country
     * @param string $country Customer country in ISO 3166-1 alpha-2
     * @return $this
     */
    public function setCountry($country)
    {
        
        $this->country = $country;
        return $this;
    }
    
    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }
  
    /**
     * Sets phone
     * @param string $phone Customer phone number
     * @return $this
     */
    public function setPhone($phone)
    {
        
        $this->phone = $phone;
        return $this;
    }
    
    /**
     * Gets company
     * @return string
     */
    public function getCompany()
    {
        return $this->company;
    }
  
    /**
     * Sets company
     * @param string $company Customer company
     * @return $this
     */
    public function setCompany($company)
    {
        
        $this->company = $company;
        return $this;
    }
    
    /**
     * Gets vat
     * @return string
     */
    public function getVat()
    {
        return $this->vat;
    }
  
    /**
     * Sets vat
     * @param string $vat Customer vat number
     * @return $this
     */
    public function setVat($vat)
    {
        
        $this->vat = $vat;
        return $this;
    }
    
    /**
     * Gets handle
     * @return string
     */
    public function getHandle()
    {
        return $this->handle;
    }
  
    /**
     * Sets handle
     * @param string $handle Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle is not defined.
     * @return $this
     */
    public function setHandle($handle)
    {
        
        $this->handle = $handle;
        return $this;
    }
    
    /**
     * Gets test
     * @return bool
     */
    public function getTest()
    {
        return $this->test;
    }
  
    /**
     * Sets test
     * @param bool $test Test flag. If given it will be verified that the account state matches the intended create state.
     * @return $this
     */
    public function setTest($test)
    {
        
        $this->test = $test;
        return $this;
    }
    
    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->first_name;
    }
  
    /**
     * Sets first_name
     * @param string $first_name Customer first name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        
        $this->first_name = $first_name;
        return $this;
    }
    
    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->last_name;
    }
  
    /**
     * Sets last_name
     * @param string $last_name Customer last name
     * @return $this
     */
    public function setLastName($last_name)
    {
        
        $this->last_name = $last_name;
        return $this;
    }
    
    /**
     * Gets postal_code
     * @return string
     */
    public function getPostalCode()
    {
        return $this->postal_code;
    }
  
    /**
     * Sets postal_code
     * @param string $postal_code Customer postal code
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        
        $this->postal_code = $postal_code;
        return $this;
    }
    
    /**
     * Gets generate_handle
     * @return bool
     */
    public function getGenerateHandle()
    {
        return $this->generate_handle;
    }
  
    /**
     * Sets generate_handle
     * @param bool $generate_handle Auto generate handle on the form cust-[sequence_number]
     * @return $this
     */
    public function setGenerateHandle($generate_handle)
    {
        
        $this->generate_handle = $generate_handle;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
