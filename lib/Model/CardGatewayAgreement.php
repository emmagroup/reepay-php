<?php
/**
 * CardGatewayAgreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * CardGatewayAgreement Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CardGatewayAgreement implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'provider' => 'string',
        'id' => 'string',
        'state' => 'string',
        'card_types' => 'string[]',
        'provider_settings' => 'map[string,\Swagger\Client\Model\InlineResponse200]',
        'gw_ref' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'provider' => 'provider',
        'id' => 'id',
        'state' => 'state',
        'card_types' => 'card_types',
        'provider_settings' => 'provider_settings',
        'gw_ref' => 'gw_ref'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'provider' => 'setProvider',
        'id' => 'setId',
        'state' => 'setState',
        'card_types' => 'setCardTypes',
        'provider_settings' => 'setProviderSettings',
        'gw_ref' => 'setGwRef'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'provider' => 'getProvider',
        'id' => 'getId',
        'state' => 'getState',
        'card_types' => 'getCardTypes',
        'provider_settings' => 'getProviderSettings',
        'gw_ref' => 'getGwRef'
    );
  
    
    /**
      * $provider Card types supported by agreement
      * @var string
      */
    protected $provider;
    
    /**
      * $id Card gateway agreement id
      * @var string
      */
    protected $id;
    
    /**
      * $state Card gateway state:
      * @var string
      */
    protected $state;
    
    /**
      * $card_types Card types supported by agreement
      * @var string[]
      */
    protected $card_types;
    
    /**
      * $provider_settings Key value map of provider settings
      * @var map[string,\Swagger\Client\Model\InlineResponse200]
      */
    protected $provider_settings;
    
    /**
      * $gw_ref Card gateway reference id
      * @var string
      */
    protected $gw_ref;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->provider = $data["provider"];
            $this->id = $data["id"];
            $this->state = $data["state"];
            $this->card_types = $data["card_types"];
            $this->provider_settings = $data["provider_settings"];
            $this->gw_ref = $data["gw_ref"];
        }
    }
    
    /**
     * Gets provider
     * @return string
     */
    public function getProvider()
    {
        return $this->provider;
    }
  
    /**
     * Sets provider
     * @param string $provider Card types supported by agreement
     * @return $this
     */
    public function setProvider($provider)
    {
        
        $this->provider = $provider;
        return $this;
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Card gateway agreement id
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }
  
    /**
     * Sets state
     * @param string $state Card gateway state:
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array("active", "inactive", "deleted");
        if (!in_array($state, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'active', 'inactive', 'deleted'");
        }
        $this->state = $state;
        return $this;
    }
    
    /**
     * Gets card_types
     * @return string[]
     */
    public function getCardTypes()
    {
        return $this->card_types;
    }
  
    /**
     * Sets card_types
     * @param string[] $card_types Card types supported by agreement
     * @return $this
     */
    public function setCardTypes($card_types)
    {
        
        $this->card_types = $card_types;
        return $this;
    }
    
    /**
     * Gets provider_settings
     * @return map[string,\Swagger\Client\Model\InlineResponse200]
     */
    public function getProviderSettings()
    {
        return $this->provider_settings;
    }
  
    /**
     * Sets provider_settings
     * @param map[string,\Swagger\Client\Model\InlineResponse200] $provider_settings Key value map of provider settings
     * @return $this
     */
    public function setProviderSettings($provider_settings)
    {
        
        $this->provider_settings = $provider_settings;
        return $this;
    }
    
    /**
     * Gets gw_ref
     * @return string
     */
    public function getGwRef()
    {
        return $this->gw_ref;
    }
  
    /**
     * Sets gw_ref
     * @param string $gw_ref Card gateway reference id
     * @return $this
     */
    public function setGwRef($gw_ref)
    {
        
        $this->gw_ref = $gw_ref;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
