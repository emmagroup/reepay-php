<?php
/**
 * SubscriptionSearch
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * SubscriptionSearch Class Doc Comment
 *
 * @category    Class
 * @description A page in a paginated subscription search
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionSearch implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'page' => 'int',
        'size' => 'int',
        'count' => 'int',
        'search' => 'string',
        'sort' => 'string',
        'content' => '\Swagger\Client\Model\Subscription[]',
        'total_elements' => 'int',
        'total_pages' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'page' => 'page',
        'size' => 'size',
        'count' => 'count',
        'search' => 'search',
        'sort' => 'sort',
        'content' => 'content',
        'total_elements' => 'total_elements',
        'total_pages' => 'total_pages'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'page' => 'setPage',
        'size' => 'setSize',
        'count' => 'setCount',
        'search' => 'setSearch',
        'sort' => 'setSort',
        'content' => 'setContent',
        'total_elements' => 'setTotalElements',
        'total_pages' => 'setTotalPages'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'page' => 'getPage',
        'size' => 'getSize',
        'count' => 'getCount',
        'search' => 'getSearch',
        'sort' => 'getSort',
        'content' => 'getContent',
        'total_elements' => 'getTotalElements',
        'total_pages' => 'getTotalPages'
    );
  
    
    /**
      * $page Number of current page in paginated list
      * @var int
      */
    protected $page;
    
    /**
      * $size Page size in paginated list
      * @var int
      */
    protected $size;
    
    /**
      * $count Number of elements in current page
      * @var int
      */
    protected $count;
    
    /**
      * $search Optional search expression used
      * @var string
      */
    protected $search;
    
    /**
      * $sort Optional sort expression used
      * @var string
      */
    protected $sort;
    
    /**
      * $content List of subscriptions for current page
      * @var \Swagger\Client\Model\Subscription[]
      */
    protected $content;
    
    /**
      * $total_elements Total number of elements in paginated list
      * @var int
      */
    protected $total_elements;
    
    /**
      * $total_pages Total number of pages in paginated list
      * @var int
      */
    protected $total_pages;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->page = $data["page"];
            $this->size = $data["size"];
            $this->count = $data["count"];
            $this->search = $data["search"];
            $this->sort = $data["sort"];
            $this->content = $data["content"];
            $this->total_elements = $data["total_elements"];
            $this->total_pages = $data["total_pages"];
        }
    }
    
    /**
     * Gets page
     * @return int
     */
    public function getPage()
    {
        return $this->page;
    }
  
    /**
     * Sets page
     * @param int $page Number of current page in paginated list
     * @return $this
     */
    public function setPage($page)
    {
        
        $this->page = $page;
        return $this;
    }
    
    /**
     * Gets size
     * @return int
     */
    public function getSize()
    {
        return $this->size;
    }
  
    /**
     * Sets size
     * @param int $size Page size in paginated list
     * @return $this
     */
    public function setSize($size)
    {
        
        $this->size = $size;
        return $this;
    }
    
    /**
     * Gets count
     * @return int
     */
    public function getCount()
    {
        return $this->count;
    }
  
    /**
     * Sets count
     * @param int $count Number of elements in current page
     * @return $this
     */
    public function setCount($count)
    {
        
        $this->count = $count;
        return $this;
    }
    
    /**
     * Gets search
     * @return string
     */
    public function getSearch()
    {
        return $this->search;
    }
  
    /**
     * Sets search
     * @param string $search Optional search expression used
     * @return $this
     */
    public function setSearch($search)
    {
        
        $this->search = $search;
        return $this;
    }
    
    /**
     * Gets sort
     * @return string
     */
    public function getSort()
    {
        return $this->sort;
    }
  
    /**
     * Sets sort
     * @param string $sort Optional sort expression used
     * @return $this
     */
    public function setSort($sort)
    {
        
        $this->sort = $sort;
        return $this;
    }
    
    /**
     * Gets content
     * @return \Swagger\Client\Model\Subscription[]
     */
    public function getContent()
    {
        return $this->content;
    }
  
    /**
     * Sets content
     * @param \Swagger\Client\Model\Subscription[] $content List of subscriptions for current page
     * @return $this
     */
    public function setContent($content)
    {
        
        $this->content = $content;
        return $this;
    }
    
    /**
     * Gets total_elements
     * @return int
     */
    public function getTotalElements()
    {
        return $this->total_elements;
    }
  
    /**
     * Sets total_elements
     * @param int $total_elements Total number of elements in paginated list
     * @return $this
     */
    public function setTotalElements($total_elements)
    {
        
        $this->total_elements = $total_elements;
        return $this;
    }
    
    /**
     * Gets total_pages
     * @return int
     */
    public function getTotalPages()
    {
        return $this->total_pages;
    }
  
    /**
     * Sets total_pages
     * @param int $total_pages Total number of pages in paginated list
     * @return $this
     */
    public function setTotalPages($total_pages)
    {
        
        $this->total_pages = $total_pages;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
