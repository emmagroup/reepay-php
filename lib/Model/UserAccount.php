<?php
/**
 * UserAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * UserAccount Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserAccount implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'email' => 'string',
        'name' => 'string',
        'state' => 'string',
        'groups' => 'string[]',
        'permissions' => 'string[]',
        'verified_email' => 'bool',
        'invite_expires' => '\DateTime'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'email' => 'email',
        'name' => 'name',
        'state' => 'state',
        'groups' => 'groups',
        'permissions' => 'permissions',
        'verified_email' => 'verified_email',
        'invite_expires' => 'invite_expires'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'email' => 'setEmail',
        'name' => 'setName',
        'state' => 'setState',
        'groups' => 'setGroups',
        'permissions' => 'setPermissions',
        'verified_email' => 'setVerifiedEmail',
        'invite_expires' => 'setInviteExpires'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'email' => 'getEmail',
        'name' => 'getName',
        'state' => 'getState',
        'groups' => 'getGroups',
        'permissions' => 'getPermissions',
        'verified_email' => 'getVerifiedEmail',
        'invite_expires' => 'getInviteExpires'
    );
  
    
    /**
      * $id Unique id for the user assigned by Reepay
      * @var string
      */
    protected $id;
    
    /**
      * $email User email
      * @var string
      */
    protected $email;
    
    /**
      * $name User name
      * @var string
      */
    protected $name;
    
    /**
      * $state State of user for account: `active`, `invited`
      * @var string
      */
    protected $state;
    
    /**
      * $groups List of user groups
      * @var string[]
      */
    protected $groups;
    
    /**
      * $permissions List of user permissions
      * @var string[]
      */
    protected $permissions;
    
    /**
      * $verified_email Email verified
      * @var bool
      */
    protected $verified_email = false;
    
    /**
      * $invite_expires Expiry date for invite
      * @var \DateTime
      */
    protected $invite_expires;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->email = $data["email"];
            $this->name = $data["name"];
            $this->state = $data["state"];
            $this->groups = $data["groups"];
            $this->permissions = $data["permissions"];
            $this->verified_email = $data["verified_email"];
            $this->invite_expires = $data["invite_expires"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Unique id for the user assigned by Reepay
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email User email
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name User name
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }
  
    /**
     * Sets state
     * @param string $state State of user for account: `active`, `invited`
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array("active", "invited");
        if (!in_array($state, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'active', 'invited'");
        }
        $this->state = $state;
        return $this;
    }
    
    /**
     * Gets groups
     * @return string[]
     */
    public function getGroups()
    {
        return $this->groups;
    }
  
    /**
     * Sets groups
     * @param string[] $groups List of user groups
     * @return $this
     */
    public function setGroups($groups)
    {
        
        $this->groups = $groups;
        return $this;
    }
    
    /**
     * Gets permissions
     * @return string[]
     */
    public function getPermissions()
    {
        return $this->permissions;
    }
  
    /**
     * Sets permissions
     * @param string[] $permissions List of user permissions
     * @return $this
     */
    public function setPermissions($permissions)
    {
        
        $this->permissions = $permissions;
        return $this;
    }
    
    /**
     * Gets verified_email
     * @return bool
     */
    public function getVerifiedEmail()
    {
        return $this->verified_email;
    }
  
    /**
     * Sets verified_email
     * @param bool $verified_email Email verified
     * @return $this
     */
    public function setVerifiedEmail($verified_email)
    {
        
        $this->verified_email = $verified_email;
        return $this;
    }
    
    /**
     * Gets invite_expires
     * @return \DateTime
     */
    public function getInviteExpires()
    {
        return $this->invite_expires;
    }
  
    /**
     * Sets invite_expires
     * @param \DateTime $invite_expires Expiry date for invite
     * @return $this
     */
    public function setInviteExpires($invite_expires)
    {
        
        $this->invite_expires = $invite_expires;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
