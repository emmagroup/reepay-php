<?php
/**
 * CreateDunningPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * CreateDunningPlan Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateDunningPlan implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'name' => 'string',
        'schedule' => 'int[]',
        'handle' => 'string',
        'default_plan' => 'bool',
        'final_subscription_action' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'name' => 'name',
        'schedule' => 'schedule',
        'handle' => 'handle',
        'default_plan' => 'default_plan',
        'final_subscription_action' => 'final_subscription_action'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'name' => 'setName',
        'schedule' => 'setSchedule',
        'handle' => 'setHandle',
        'default_plan' => 'setDefaultPlan',
        'final_subscription_action' => 'setFinalSubscriptionAction'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'name' => 'getName',
        'schedule' => 'getSchedule',
        'handle' => 'getHandle',
        'default_plan' => 'getDefaultPlan',
        'final_subscription_action' => 'getFinalSubscriptionAction'
    );
  
    
    /**
      * $name Dunning plan name
      * @var string
      */
    protected $name;
    
    /**
      * $schedule The schedule as list of intervals in days
      * @var int[]
      */
    protected $schedule;
    
    /**
      * $handle Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
      * @var string
      */
    protected $handle;
    
    /**
      * $default_plan If this is default plan
      * @var bool
      */
    protected $default_plan = false;
    
    /**
      * $final_subscription_action Action to take for subscription if dunning fails, one of the following: `expire`, `none`
      * @var string
      */
    protected $final_subscription_action;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->name = $data["name"];
            $this->schedule = $data["schedule"];
            $this->handle = $data["handle"];
            $this->default_plan = $data["default_plan"];
            $this->final_subscription_action = $data["final_subscription_action"];
        }
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Dunning plan name
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets schedule
     * @return int[]
     */
    public function getSchedule()
    {
        return $this->schedule;
    }
  
    /**
     * Sets schedule
     * @param int[] $schedule The schedule as list of intervals in days
     * @return $this
     */
    public function setSchedule($schedule)
    {
        
        $this->schedule = $schedule;
        return $this;
    }
    
    /**
     * Gets handle
     * @return string
     */
    public function getHandle()
    {
        return $this->handle;
    }
  
    /**
     * Sets handle
     * @param string $handle Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
     * @return $this
     */
    public function setHandle($handle)
    {
        
        $this->handle = $handle;
        return $this;
    }
    
    /**
     * Gets default_plan
     * @return bool
     */
    public function getDefaultPlan()
    {
        return $this->default_plan;
    }
  
    /**
     * Sets default_plan
     * @param bool $default_plan If this is default plan
     * @return $this
     */
    public function setDefaultPlan($default_plan)
    {
        
        $this->default_plan = $default_plan;
        return $this;
    }
    
    /**
     * Gets final_subscription_action
     * @return string
     */
    public function getFinalSubscriptionAction()
    {
        return $this->final_subscription_action;
    }
  
    /**
     * Sets final_subscription_action
     * @param string $final_subscription_action Action to take for subscription if dunning fails, one of the following: `expire`, `none`
     * @return $this
     */
    public function setFinalSubscriptionAction($final_subscription_action)
    {
        $allowed_values = array("expire", "none");
        if (!in_array($final_subscription_action, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'final_subscription_action', must be one of 'expire', 'none'");
        }
        $this->final_subscription_action = $final_subscription_action;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
