<?php
/**
 * UpdateSubscriptionPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * UpdateSubscriptionPlan Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UpdateSubscriptionPlan implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'name' => 'string',
        'description' => 'string',
        'vat' => 'float',
        'dunning_plan' => 'string',
        'renewal_reminder_email_days' => 'int',
        'trial_reminder_email_days' => 'int',
        'partial_period_handling' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'name' => 'name',
        'description' => 'description',
        'vat' => 'vat',
        'dunning_plan' => 'dunning_plan',
        'renewal_reminder_email_days' => 'renewal_reminder_email_days',
        'trial_reminder_email_days' => 'trial_reminder_email_days',
        'partial_period_handling' => 'partial_period_handling'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'name' => 'setName',
        'description' => 'setDescription',
        'vat' => 'setVat',
        'dunning_plan' => 'setDunningPlan',
        'renewal_reminder_email_days' => 'setRenewalReminderEmailDays',
        'trial_reminder_email_days' => 'setTrialReminderEmailDays',
        'partial_period_handling' => 'setPartialPeriodHandling'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'name' => 'getName',
        'description' => 'getDescription',
        'vat' => 'getVat',
        'dunning_plan' => 'getDunningPlan',
        'renewal_reminder_email_days' => 'getRenewalReminderEmailDays',
        'trial_reminder_email_days' => 'getTrialReminderEmailDays',
        'partial_period_handling' => 'getPartialPeriodHandling'
    );
  
    
    /**
      * $name Name of the plan
      * @var string
      */
    protected $name;
    
    /**
      * $description Description of the plan
      * @var string
      */
    protected $description;
    
    /**
      * $vat Optional vat for this plan. Account default is used if none given.
      * @var float
      */
    protected $vat;
    
    /**
      * $dunning_plan Dunning plan handle
      * @var string
      */
    protected $dunning_plan;
    
    /**
      * $renewal_reminder_email_days Optional renewal reminder email settings. Number of days before next billing to send a reminder email.
      * @var int
      */
    protected $renewal_reminder_email_days;
    
    /**
      * $trial_reminder_email_days Optional end of trial reminder email settings. Number of days before end of trial to send a reminder email.
      * @var int
      */
    protected $trial_reminder_email_days;
    
    /**
      * $partial_period_handling How to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.
      * @var string
      */
    protected $partial_period_handling;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->name = $data["name"];
            $this->description = $data["description"];
            $this->vat = $data["vat"];
            $this->dunning_plan = $data["dunning_plan"];
            $this->renewal_reminder_email_days = $data["renewal_reminder_email_days"];
            $this->trial_reminder_email_days = $data["trial_reminder_email_days"];
            $this->partial_period_handling = $data["partial_period_handling"];
        }
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Name of the plan
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description Description of the plan
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets vat
     * @return float
     */
    public function getVat()
    {
        return $this->vat;
    }
  
    /**
     * Sets vat
     * @param float $vat Optional vat for this plan. Account default is used if none given.
     * @return $this
     */
    public function setVat($vat)
    {
        
        $this->vat = $vat;
        return $this;
    }
    
    /**
     * Gets dunning_plan
     * @return string
     */
    public function getDunningPlan()
    {
        return $this->dunning_plan;
    }
  
    /**
     * Sets dunning_plan
     * @param string $dunning_plan Dunning plan handle
     * @return $this
     */
    public function setDunningPlan($dunning_plan)
    {
        
        $this->dunning_plan = $dunning_plan;
        return $this;
    }
    
    /**
     * Gets renewal_reminder_email_days
     * @return int
     */
    public function getRenewalReminderEmailDays()
    {
        return $this->renewal_reminder_email_days;
    }
  
    /**
     * Sets renewal_reminder_email_days
     * @param int $renewal_reminder_email_days Optional renewal reminder email settings. Number of days before next billing to send a reminder email.
     * @return $this
     */
    public function setRenewalReminderEmailDays($renewal_reminder_email_days)
    {
        
        $this->renewal_reminder_email_days = $renewal_reminder_email_days;
        return $this;
    }
    
    /**
     * Gets trial_reminder_email_days
     * @return int
     */
    public function getTrialReminderEmailDays()
    {
        return $this->trial_reminder_email_days;
    }
  
    /**
     * Sets trial_reminder_email_days
     * @param int $trial_reminder_email_days Optional end of trial reminder email settings. Number of days before end of trial to send a reminder email.
     * @return $this
     */
    public function setTrialReminderEmailDays($trial_reminder_email_days)
    {
        
        $this->trial_reminder_email_days = $trial_reminder_email_days;
        return $this;
    }
    
    /**
     * Gets partial_period_handling
     * @return string
     */
    public function getPartialPeriodHandling()
    {
        return $this->partial_period_handling;
    }
  
    /**
     * Sets partial_period_handling
     * @param string $partial_period_handling How to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.
     * @return $this
     */
    public function setPartialPeriodHandling($partial_period_handling)
    {
        $allowed_values = array("bill_full", "bill_prorated", "bill_zero_amount", "no_bill");
        if (!in_array($partial_period_handling, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'partial_period_handling', must be one of 'bill_full', 'bill_prorated', 'bill_zero_amount', 'no_bill'");
        }
        $this->partial_period_handling = $partial_period_handling;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
