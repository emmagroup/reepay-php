<?php
/**
 * PreviewMailTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * PreviewMailTemplate Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PreviewMailTemplate implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'disabled' => 'bool',
        'subject' => 'string',
        'cc' => 'string[]',
        'mail_from' => 'string',
        'text_body' => 'string',
        'html_body' => 'string',
        'send_to' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'disabled' => 'disabled',
        'subject' => 'subject',
        'cc' => 'cc',
        'mail_from' => 'mail_from',
        'text_body' => 'text_body',
        'html_body' => 'html_body',
        'send_to' => 'send_to'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'disabled' => 'setDisabled',
        'subject' => 'setSubject',
        'cc' => 'setCc',
        'mail_from' => 'setMailFrom',
        'text_body' => 'setTextBody',
        'html_body' => 'setHtmlBody',
        'send_to' => 'setSendTo'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'disabled' => 'getDisabled',
        'subject' => 'getSubject',
        'cc' => 'getCc',
        'mail_from' => 'getMailFrom',
        'text_body' => 'getTextBody',
        'html_body' => 'getHtmlBody',
        'send_to' => 'getSendTo'
    );
  
    
    /**
      * $disabled Should this email be sent by Reepay
      * @var bool
      */
    protected $disabled = false;
    
    /**
      * $subject Mail subject
      * @var string
      */
    protected $subject;
    
    /**
      * $cc Optional cc addresses in RFC-822 format
      * @var string[]
      */
    protected $cc;
    
    /**
      * $mail_from Sender address to use in RFC-822 format. If not set the default account mail settings sender address will be used.
      * @var string
      */
    protected $mail_from;
    
    /**
      * $text_body Text body template content
      * @var string
      */
    protected $text_body;
    
    /**
      * $html_body HTML body template content
      * @var string
      */
    protected $html_body;
    
    /**
      * $send_to Optional email address in RFC-822 format to send preview to
      * @var string
      */
    protected $send_to;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->disabled = $data["disabled"];
            $this->subject = $data["subject"];
            $this->cc = $data["cc"];
            $this->mail_from = $data["mail_from"];
            $this->text_body = $data["text_body"];
            $this->html_body = $data["html_body"];
            $this->send_to = $data["send_to"];
        }
    }
    
    /**
     * Gets disabled
     * @return bool
     */
    public function getDisabled()
    {
        return $this->disabled;
    }
  
    /**
     * Sets disabled
     * @param bool $disabled Should this email be sent by Reepay
     * @return $this
     */
    public function setDisabled($disabled)
    {
        
        $this->disabled = $disabled;
        return $this;
    }
    
    /**
     * Gets subject
     * @return string
     */
    public function getSubject()
    {
        return $this->subject;
    }
  
    /**
     * Sets subject
     * @param string $subject Mail subject
     * @return $this
     */
    public function setSubject($subject)
    {
        
        $this->subject = $subject;
        return $this;
    }
    
    /**
     * Gets cc
     * @return string[]
     */
    public function getCc()
    {
        return $this->cc;
    }
  
    /**
     * Sets cc
     * @param string[] $cc Optional cc addresses in RFC-822 format
     * @return $this
     */
    public function setCc($cc)
    {
        
        $this->cc = $cc;
        return $this;
    }
    
    /**
     * Gets mail_from
     * @return string
     */
    public function getMailFrom()
    {
        return $this->mail_from;
    }
  
    /**
     * Sets mail_from
     * @param string $mail_from Sender address to use in RFC-822 format. If not set the default account mail settings sender address will be used.
     * @return $this
     */
    public function setMailFrom($mail_from)
    {
        
        $this->mail_from = $mail_from;
        return $this;
    }
    
    /**
     * Gets text_body
     * @return string
     */
    public function getTextBody()
    {
        return $this->text_body;
    }
  
    /**
     * Sets text_body
     * @param string $text_body Text body template content
     * @return $this
     */
    public function setTextBody($text_body)
    {
        
        $this->text_body = $text_body;
        return $this;
    }
    
    /**
     * Gets html_body
     * @return string
     */
    public function getHtmlBody()
    {
        return $this->html_body;
    }
  
    /**
     * Sets html_body
     * @param string $html_body HTML body template content
     * @return $this
     */
    public function setHtmlBody($html_body)
    {
        
        $this->html_body = $html_body;
        return $this;
    }
    
    /**
     * Gets send_to
     * @return string
     */
    public function getSendTo()
    {
        return $this->send_to;
    }
  
    /**
     * Sets send_to
     * @param string $send_to Optional email address in RFC-822 format to send preview to
     * @return $this
     */
    public function setSendTo($send_to)
    {
        
        $this->send_to = $send_to;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
